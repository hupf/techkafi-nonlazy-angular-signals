import{f as u,o as i,g as t,j as c,b as p,w as d,ac as e,v as f,x as m,C as a}from"../modules/vue-DZveH3c9.js";import{u as o,f as _}from"./context-Bk4cSnxM.js";import"../index-DHhLvl0H.js";import"../modules/shiki-BNvmXfxE.js";const g={class:"slidev-layout h-full grid bullets"},h={class:"pt-18"},b={__name:"bullets",setup(r){return o(),(s,l)=>(i(),u("div",g,[t("div",h,[c(s.$slots,"default")])]))}},w={__name:"slides.md__slidev_18",setup(r){const{$clicksContext:s,$frontmatter:l}=o();return s.setup(),(v,n)=>(i(),p(b,f(m(a(_)(a(l),17))),{default:d(()=>n[0]||(n[0]=[t("h1",null,"Lazyness observations",-1),t("ul",null,[t("li",null,[t("code",null,"toSignal"),e(' immediately subscribes to observable, making it "hot"')]),t("li",null,[t("code",null,"toSignal"),e(" creates a subscription that is alive as long as the component/service is alive.")]),t("li",null,[t("code",null,"toLazySignal"),e(" (unofficial):")])],-1),t("blockquote",null,[t("p",null,[e("This function works almost like the original "),t("code",null,"toSignal()"),e(" from Angular core (and uses it), but the subscription will be created not instantly - only when the resulting signal is read for the first time.")])],-1),t("p",null,[t("a",{href:"https://ngxtension.netlify.app/utilities/signals/to-lazy-signal/",target:"_blank"},"https://ngxtension.netlify.app/utilities/signals/to-lazy-signal/")],-1)])),_:1},16))}};export{w as default};
